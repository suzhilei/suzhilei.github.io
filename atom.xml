<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小胖子</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-30T17:21:02.733Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小胖子</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/01/30/Collections-Framework/"/>
    <id>http://yoursite.com/2018/01/30/Collections-Framework/</id>
    <published>2018-01-30T14:34:38.586Z</published>
    <updated>2018-01-30T17:21:02.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Java集合类简介："><a href="#一、Java集合类简介：" class="headerlink" title="一、Java集合类简介："></a>一、Java集合类简介：</h2><p>Java集合大致可以分为Set、List、Queue和Map四种体系。</p><p>其中Set代表无序、不可重复的集合；List代表有序、重复的集合；而Map则代表具有映射关系的集合。Java 5 又增加了Queue体系集合，代表一种队列集合实现。</p><p>Java集合就像一种容器，可以把多个对象（实际上是对象的引用，但习惯上都称对象）“丢进”该容器中。从Java 5 增加了泛型以后，Java集合可以记住容器中对象的数据类型，使得编码更加简洁、健壮。</p><h3 id="1-Java集合和数组的区别："><a href="#1-Java集合和数组的区别：" class="headerlink" title="1.Java集合和数组的区别："></a>1.Java集合和数组的区别：</h3><p>①.数组长度在初始化时指定，意味着只能保存定长的数据。而集合可以保存数量不确定的数据。同时可以保存具有映射关系的数据（即关联数组，键值对 key-value）。</p><p>②.数组元素即可以是基本类型的值，也可以是对象。集合里只能保存对象（实际上只是保存对象的引用变量），基本数据类型的变量要转换成对应的包装类才能放入集合类中。</p><h3 id="2-Java集合类之间的继承关系"><a href="#2-Java集合类之间的继承关系" class="headerlink" title="2.Java集合类之间的继承关系:"></a>2.Java集合类之间的继承关系:</h3><p>Java的集合类主要由两个接口派生而出：Collection和Map,Collection和Map是Java集合框架的根接口。</p><p><img src="http://upload-images.jianshu.io/upload_images/3985563-e7febf364d8d8235.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>图中，ArrayList,HashSet,LinkedList,TreeSet是我们经常会有用到的已实现的集合类。</p><p>Map实现类用于保存具有映射关系的数据。Map保存的每项数据都是key-value对，也就是由key和value两个值组成。Map里的key是不可重复的，key用户标识集合里的每项数据。</p><p><img src="http://upload-images.jianshu.io/upload_images/3985563-06052107849a7603.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>图中，HashMap，TreeMap是我们经常会用到的集合类。</p><h2 id="二、Collection接口："><a href="#二、Collection接口：" class="headerlink" title="二、Collection接口："></a>二、Collection接口：</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>Collection接口是Set,Queue,List的父接口。Collection接口中定义了多种方法可供其子类进行实现，以实现数据操作。由于方法比较多，就偷个懒，直接把JDK文档上的内容搬过来。</p><h4 id="1-1-接口中定义的方法"><a href="#1-1-接口中定义的方法" class="headerlink" title="1.1.接口中定义的方法"></a>1.1.接口中定义的方法</h4><p><img src="http://upload-images.jianshu.io/upload_images/3985563-414332ffe4733274.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可以看出Collection用法有：添加元素，删除元素，返回Collection集合的个数以及清空集合等。<br>其中重点介绍iterator()方法，该方法的返回值是Iterator<e>。</e></p><h4 id="1-2-使用Iterator遍历集合元素"><a href="#1-2-使用Iterator遍历集合元素" class="headerlink" title="1.2.使用Iterator遍历集合元素"></a>1.2.使用Iterator遍历集合元素</h4><p>Iterator接口经常被称作迭代器，它是Collection接口的父接口。但Iterator主要用于遍历集合中的元素。<br>Iterator接口中主要定义了2个方法：</p><p><img src="http://upload-images.jianshu.io/upload_images/3985563-63737a2d81713a47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>下面程序简单示范了通过Iterator对象逐个获取元素的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorExample</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建集合，添加元素  </span></span><br><span class="line">Collection&lt;Day&gt; days = <span class="keyword">new</span> ArrayList&lt;Day&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">Day day = <span class="keyword">new</span> Day(i,i*<span class="number">60</span>,i*<span class="number">3600</span>);</span><br><span class="line">days.add(day);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取days集合的迭代器</span></span><br><span class="line">Iterator&lt;Day&gt; iterator = days.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;<span class="comment">//判断是否有下一个元素</span></span><br><span class="line">Day next = iterator.next();<span class="comment">//取出该元素</span></span><br><span class="line"><span class="comment">//逐个遍历，取得元素后进行后续操作</span></span><br><span class="line">.....</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 当使用Iterator对集合元素进行迭代时，把集合元素的值传给了迭代变量（就如同参数传递是值传递，基本数据类型传递的是值，引用类型传递的仅仅是对象的<strong>引用变量</strong>。</p><p>下面的程序演示了这一点：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorExample</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            List&lt;MyObject&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                list.add(<span class="keyword">new</span> MyObject(i));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(list.toString());</span><br><span class="line"></span><br><span class="line">            Iterator&lt;MyObject&gt; iterator = list.iterator();<span class="comment">//集合元素的值传给了迭代变量，仅仅传递了对象引用。保存的仅仅是指向对象内存空间的地址</span></span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                MyObject next = iterator.next();</span><br><span class="line">                next.num = <span class="number">99</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(list.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">        MyObject(<span class="keyword">int</span> num) &#123;</span><br><span class="line">            <span class="keyword">this</span>.num = num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> String.valueOf(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果如下：</p><blockquote><p>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</p><p>[99, 99, 99, 99, 99, 99, 99, 99, 99, 99]</p></blockquote><p>下面具体介绍Collection接口的三个子接口Set，List，Queue。</p><h3 id="2-Set集合"><a href="#2-Set集合" class="headerlink" title="2.Set集合"></a>2.Set集合</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Set集合与Collection集合基本相同，没有提供任何额外的方法。实际上Set就是Collection，只是行为略有不同（Set不允许包含重复元素）。</p><p>Set集合不允许包含相同的元素，如果试图把两个相同的元素加入同一个Set集合中，则添加操作失败，add()方法返回false，且新元素不会被加入。</p><h3 id="3-List集合"><a href="#3-List集合" class="headerlink" title="3.List集合"></a>3.List集合</h3><h4 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1.简介"></a>3.1.简介</h4><p>List集合代表一个元素有序、可重复的集合，集合中每个元素都有其对应的顺序索引。List集合允许使用重复元素，可以通过索引来访问指定位置的集合元素 。List集合默认按元素的添加顺序设置元素的索引，例如第一个添加的元素索引为0，第二个添加的元素索引为1……</p><p>List作为Collection接口的子接口，可以使用Collection接口里的全部方法。而且由于List是有序集合，因此List集合里增加了一些根据索引来操作集合元素的方法。</p><h4 id="3-2-接口中定义的方法"><a href="#3-2-接口中定义的方法" class="headerlink" title="3.2.接口中定义的方法"></a>3.2.接口中定义的方法</h4><blockquote><p><strong>void add(int index, Object element):</strong> 在列表的指定位置插入指定元素（可选操作）。</p><p><strong>boolean addAll(int index, Collection&lt;? extends E&gt; c) :</strong> 将集合c 中的所有元素都插入到列表中的指定位置index处。</p><p><strong>Object get(index):</strong> 返回列表中指定位置的元素。</p><p><strong>int indexOf(Object o):</strong> 返回此列表中第一次出现的指定元素的索引；如果此列表不包含该元素，则返回 -1。</p><p><strong>int lastIndexOf(Object o):</strong> 返回此列表中最后出现的指定元素的索引；如果列表不包含此元素，则返回 -1。</p><p><strong>Object remove(int index):</strong> 移除列表中指定位置的元素。</p><p><strong>Object set(int index, Object element):</strong> 用指定元素替换列表中指定位置的元素。</p><p><strong>List subList(int fromIndex, int toIndex):</strong> 返回列表中指定的 fromIndex（包括 ）和 toIndex（不包括）之间的所有集合元素组成的子集。</p><p><strong>Object[] toArray():</strong> 返回按适当顺序包含列表中的所有元素的数组（从第一个元素到最后一个元素）。</p></blockquote><p>除此之外，Java 8还为List接口添加了如下两个默认方法。</p><blockquote><p><strong>void replaceAll(UnaryOperator operator):</strong> 根据operator指定的计算规则重新设置List集合的所有元素。</p><p><strong>void sort(Comparator c):</strong> 根据Comparator参数对List集合的元素排序。</p></blockquote><h3 id="4-Queue集合"><a href="#4-Queue集合" class="headerlink" title="4.Queue集合"></a>4.Queue集合</h3><h4 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1.简介"></a>4.1.简介</h4><p>Queue用户模拟队列这种数据结构，队列通常是指“先进先出”(FIFO，first-in-first-out)的容器。队列的头部是在队列中存放时间最长的元素，队列的尾部是保存在队列中存放时间最短的元素。新元素插入（offer）到队列的尾部，访问元素（poll）操作会返回队列头部的元素。通常，队列不允许随机访问队列中的元素。</p><h4 id="4-2-接口中定义的方法"><a href="#4-2-接口中定义的方法" class="headerlink" title="4.2.接口中定义的方法"></a>4.2.接口中定义的方法</h4><p><img src="http://upload-images.jianshu.io/upload_images/3985563-0505554930ca982e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="三、Map集合"><a href="#三、Map集合" class="headerlink" title="三、Map集合"></a>三、Map集合</h2><h3 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h3><p>Map用户保存具有映射关系的数据，因此Map集合里保存着两组数，一组值用户保存Map里的key,另一组值用户保存Map里的value，key和value都可以是任何引用类型的数据。Map的key不允许重复，即同一个Map对象的任何两个key通过equals方法比较总是返回false。</p><p>如下图所描述，key和value之间存在单向一对一关系，即通过指定的key,总能找到唯一的、确定的value。从Map中取出数据时，只要给出指定的key，就可以取出对应的value。</p><p><img src="http://upload-images.jianshu.io/upload_images/3985563-51f6c5278df941fe.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="2-Map集合与Set集合、List集合的关系"><a href="#2-Map集合与Set集合、List集合的关系" class="headerlink" title="2.Map集合与Set集合、List集合的关系"></a>2.Map集合与Set集合、List集合的关系</h3><p><strong>①.与Set集合的关系</strong></p><p>如果 把Map里的所有key放在一起看，它们就组成了一个Set集合（所有的key没有顺序，key与key之间不能重复），实际上Map确实包含了一个keySet()方法，用户返回Map里所有key组成的Set集合。</p><p><strong>②.与List集合的关系</strong></p><p>如果把Map里的所有value放在一起来看，它们又非常类似于一个List：元素与元素之间可以重复，每个元素可以根据索引来查找，只是Map中索引不再使用整数值，而是以另外一个对象作为索引。</p><h3 id="3-接口中定义的方法"><a href="#3-接口中定义的方法" class="headerlink" title="3.接口中定义的方法"></a>3.接口中定义的方法</h3><p><img src="http://upload-images.jianshu.io/upload_images/3985563-d2494516e1d68a6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>Map中还包括一个内部类Entry，该类封装了一个key-value对。Entry包含如下三个方法：</p><p><img src="http://upload-images.jianshu.io/upload_images/3985563-ecedd1880af9d40a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>Map集合最典型的用法就是成对地添加、删除key-value对，然后就是判断该Map中是否包含指定key，是否包含指定value，也可以通过Map提供的keySet()方法获取所有key组成的集合，然后使用foreach循环来遍历Map的所有key，根据key即可遍历所有的value。下面程序代码示范Map的一些基本功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Day day1 = <span class="keyword">new</span> Day(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Day day2 = <span class="keyword">new</span> Day(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">Map&lt;String,Day&gt; map = <span class="keyword">new</span> HashMap&lt;String,Day&gt;();</span><br><span class="line"><span class="comment">//成对放入key-value对</span></span><br><span class="line">map.put(<span class="string">"第一个"</span>, day1);</span><br><span class="line">map.put(<span class="string">"第二个"</span>, day2);</span><br><span class="line"><span class="comment">//判断是否包含指定的key</span></span><br><span class="line">System.out.println(map.containsKey(<span class="string">"第一个"</span>));</span><br><span class="line"><span class="comment">//判断是否包含指定的value</span></span><br><span class="line">System.out.println(map.containsValue(day1));</span><br><span class="line"><span class="comment">//循环遍历</span></span><br><span class="line"><span class="comment">//1.获得Map中所有key组成的set集合</span></span><br><span class="line">Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line"><span class="comment">//2.使用foreach进行遍历</span></span><br><span class="line"><span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line"><span class="comment">//根据key获得指定的value</span></span><br><span class="line">System.out.println(map.get(key));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据key来移除key-value对</span></span><br><span class="line">map.remove(<span class="string">"第一个"</span>);</span><br><span class="line">System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>true</p><p>true</p><p>Day [hour=2, minute=3, second=4]</p><p>Day [hour=1, minute=2, second=3]</p><p>{第二个=Day [hour=2, minute=3, second=4]}</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Java集合类简介：&quot;&gt;&lt;a href=&quot;#一、Java集合类简介：&quot; class=&quot;headerlink&quot; title=&quot;一、Java集合类简介：&quot;&gt;&lt;/a&gt;一、Java集合类简介：&lt;/h2&gt;&lt;p&gt;Java集合大致可以分为Set、List、Queue和Map
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用序列化器生成XML文件</title>
    <link href="http://yoursite.com/2018/01/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2018/01/27/我的第一篇文章/</id>
    <published>2018-01-27T13:54:47.000Z</published>
    <updated>2018-01-30T18:40:43.619Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="生成xml的步骤"><a href="#生成xml的步骤" class="headerlink" title="生成xml的步骤:"></a>生成xml的步骤:</h1><h3 id="1-获取XmlSerializer实例："><a href="#1-获取XmlSerializer实例：" class="headerlink" title="1.获取XmlSerializer实例："></a>1.获取XmlSerializer实例：</h3><pre><code>XmlSerializer serializer = Xml.newSerializer();</code></pre><h3 id="2-设置XmlSerializer序列化参数"><a href="#2-设置XmlSerializer序列化参数" class="headerlink" title="2.设置XmlSerializer序列化参数"></a>2.设置XmlSerializer序列化参数</h3><pre><code>File file = new File(Environment.getExternalStorageDirectory(), &quot;index.txt&quot;);FileOutputStream fos = new FileOutputStream(file);</code></pre><h3 id="3-写xml文档的开头"><a href="#3-写xml文档的开头" class="headerlink" title="3.写xml文档的开头"></a>3.写xml文档的开头</h3><pre><code>serializer.startDocument(&quot;utf-8&quot;, true);</code></pre><h3 id="4-写xml的节点"><a href="#4-写xml的节点" class="headerlink" title="4.写xml的节点"></a>4.写xml的节点</h3><pre><code>serializer.startTag(null, &quot;smss&quot;);     //节点的开始serializer.text(&quot;这里写内容&quot;);         //节点的内容serializer.endTag(null, &quot;smss&quot;);    //节点的结束.......可以写很多个节点</code></pre><h3 id="5-写xml文档的结束"><a href="#5-写xml文档的结束" class="headerlink" title="5.写xml文档的结束"></a>5.写xml文档的结束</h3><pre><code>serializer.endDocument()</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;生成xml的步骤&quot;&gt;&lt;a href=&quot;#生成xml的步骤&quot; class=&quot;headerlink&quot; title=&quot;生成xml的步骤:&quot;&gt;&lt;/a&gt;生成xml的步骤:&lt;/h1&gt;&lt;h3 id=&quot;1-获取XmlSerializer实例：&quot;&gt;&lt;a href=&quot;#1-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用XmlPullParser解析Xml文件</title>
    <link href="http://yoursite.com/2018/01/27/XML%E6%96%87%E4%BB%B6%E7%9A%84%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2018/01/27/XML文件的解析/</id>
    <published>2018-01-27T13:54:47.000Z</published>
    <updated>2018-02-02T10:25:43.558Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XML文件的数据来源于服务器，-服务器的开发人员通过服务器技术把数据封装在XML文件中，然后返回给客户端。对应的客户端开发人员需要对XML文件进行解析，把里面重要的数据取出来。另外，服务器是以流的形式把数据返回的。"><a href="#XML文件的数据来源于服务器，-服务器的开发人员通过服务器技术把数据封装在XML文件中，然后返回给客户端。对应的客户端开发人员需要对XML文件进行解析，把里面重要的数据取出来。另外，服务器是以流的形式把数据返回的。" class="headerlink" title="XML文件的数据来源于服务器， 服务器的开发人员通过服务器技术把数据封装在XML文件中，然后返回给客户端。对应的客户端开发人员需要对XML文件进行解析，把里面重要的数据取出来。另外，服务器是以流的形式把数据返回的。"></a>XML文件的数据来源于服务器， 服务器的开发人员通过服务器技术把数据封装在XML文件中，然后返回给客户端。对应的客户端开发人员需要对XML文件进行解析，把里面重要的数据取出来。另外，服务器是以流的形式把数据返回的。</h3><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h2 id="一、解析xml的步骤"><a href="#一、解析xml的步骤" class="headerlink" title="一、解析xml的步骤:"></a>一、解析xml的步骤:</h2><h3 id="1-获取XmlPullParser实例："><a href="#1-获取XmlPullParser实例：" class="headerlink" title="1.获取XmlPullParser实例："></a>1.获取XmlPullParser实例：</h3><pre><code>XmlPullParser Parser = Xml.XmlPullParser();</code></pre><h3 id="2-设置XmlPullParser的参数"><a href="#2-设置XmlPullParser的参数" class="headerlink" title="2.设置XmlPullParser的参数"></a>2.设置XmlPullParser的参数</h3><pre><code>parser.setInput(In,&quot;utf-8&quot;);    //设置输入流，其编码方式</code></pre><h3 id="3-获取解析文档的事件类型"><a href="#3-获取解析文档的事件类型" class="headerlink" title="3.获取解析文档的事件类型"></a>3.获取解析文档的事件类型</h3><pre><code>int type = parser.getEventType(); //相当于一个指针，一行行地遍历</code></pre><h3 id="4-判断解析的是哪个标签"><a href="#4-判断解析的是哪个标签" class="headerlink" title="4.判断解析的是哪个标签"></a>4.判断解析的是哪个标签</h3><pre><code>while(type != XmlPullParser.END_DOCUMENT){        switch (type){            case XmlPullParser.START_TAG:  //开始解析的标志                if(....){                    ....                }else if(....){                    ....                }                ....                break;            case XmlPullParser.END_TAG:      //结束解析的标志                if(....){                    ....                }                break;        }        type = parser.next();  //指向下一行    }</code></pre><h2 id="二、具体案例"><a href="#二、具体案例" class="headerlink" title="二、具体案例:"></a>二、具体案例:</h2><h3 id="1-要解析的XML文件："><a href="#1-要解析的XML文件：" class="headerlink" title="1.要解析的XML文件："></a>1.要解析的XML文件：</h3><p>weather.xml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;weather&gt;</span><br><span class="line">    &lt;channel id = &quot;1&quot;&gt;</span><br><span class="line">        &lt;city&gt;北京&lt;/city&gt;</span><br><span class="line">        &lt;temp&gt;25&lt;/temp&gt;</span><br><span class="line">        &lt;wind&gt;3&lt;/wind&gt;</span><br><span class="line">        &lt;pm250&gt;300&lt;/pm250&gt;</span><br><span class="line">    &lt;/channel&gt;</span><br><span class="line">    &lt;channel id = &quot;2&quot;&gt;</span><br><span class="line">        &lt;city&gt;郑州&lt;/city&gt;</span><br><span class="line">        &lt;temp&gt;20&lt;/temp&gt;</span><br><span class="line">        &lt;wind&gt;4&lt;/wind&gt;</span><br><span class="line">        &lt;pm250&gt;300&lt;/pm250&gt;</span><br><span class="line">    &lt;/channel&gt;</span><br><span class="line">    &lt;channel id = &quot;3&quot;&gt;</span><br><span class="line">        &lt;city&gt;长春&lt;/city&gt;</span><br><span class="line">        &lt;temp&gt;10&lt;/temp&gt;</span><br><span class="line">        &lt;wind&gt;4&lt;/wind&gt;</span><br><span class="line">        &lt;pm250&gt;100&lt;/pm250&gt;</span><br><span class="line">    &lt;/channel&gt;</span><br><span class="line">    &lt;channel id = &quot;4&quot;&gt;</span><br><span class="line">        &lt;city&gt;沈阳&lt;/city&gt;</span><br><span class="line">        &lt;temp&gt;20&lt;/temp&gt;</span><br><span class="line">        &lt;wind&gt;1&lt;/wind&gt;</span><br><span class="line">        &lt;pm250&gt;50&lt;/pm250&gt;</span><br><span class="line">    &lt;/channel&gt;</span><br><span class="line">&lt;/weather&gt;</span><br></pre></td></tr></table></figure><h3 id="2-javabean类："><a href="#2-javabean类：" class="headerlink" title="2.javabean类："></a>2.javabean类：</h3><p>Channel.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Channel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line">    <span class="keyword">public</span> String city;</span><br><span class="line">    <span class="keyword">public</span> String temp;</span><br><span class="line">    <span class="keyword">public</span> String wind;</span><br><span class="line">    <span class="keyword">public</span> String pm250;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPm250</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pm250;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPm250</span><span class="params">(String pm250)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pm250 = pm250;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTemp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTemp</span><span class="params">(String temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temp = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wind;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWind</span><span class="params">(String wind)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wind = wind;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Channel&#123;"</span> +</span><br><span class="line">                <span class="string">"city='"</span> + city + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", id='"</span> + id + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", temp='"</span> + temp + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", wind='"</span> + wind + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", pm250='"</span> + pm250 + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-解析XML文件的类："><a href="#3-解析XML文件的类：" class="headerlink" title="3.解析XML文件的类："></a>3.解析XML文件的类：</h3><p>WeatherParser.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Channel&gt; <span class="title">parserXml</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;Channel&gt; weatherLists = <span class="keyword">null</span>;  <span class="comment">//声明集合对象</span></span><br><span class="line">        Channel channel = <span class="keyword">null</span>; <span class="comment">//声明Channel对象</span></span><br><span class="line">        XmlPullParser parser = Xml.newPullParser(); <span class="comment">//获取XmlPullParser实例</span></span><br><span class="line">        parser.setInput(in, <span class="string">"utf-8"</span>); <span class="comment">//设置XmlPullParser参数</span></span><br><span class="line">        <span class="keyword">int</span> type = parser.getEventType(); <span class="comment">//获取事件类型</span></span><br><span class="line">        <span class="keyword">while</span>(type != XmlPullParser.END_DOCUMENT)&#123;</span><br><span class="line">            <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">                <span class="keyword">case</span> XmlPullParser.START_TAG:   <span class="comment">//开始解析的标志</span></span><br><span class="line">                    <span class="keyword">if</span>(<span class="string">"weather"</span>.equals(parser.getName()))&#123;</span><br><span class="line">                        weatherLists = <span class="keyword">new</span> ArrayList&lt;Channel&gt;();    <span class="comment">//创建集合的对象</span></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"channel"</span>.equals(parser.getName()))&#123;</span><br><span class="line">                        channel = <span class="keyword">new</span> Channel();    <span class="comment">//创建Channel的对象</span></span><br><span class="line">                        String id = parser.getAttributeValue(<span class="number">0</span>);    <span class="comment">//获取id的值</span></span><br><span class="line">                        channel.setId(id);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"city"</span>.equals(parser.getName()))&#123;</span><br><span class="line">                        String city = parser.nextText();    <span class="comment">//获取标签中的数据，往下的几行代码都是的一样的</span></span><br><span class="line">                        channel.setCity(city);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"temp"</span>.equals(parser.getName()))&#123;</span><br><span class="line">                        String temp = parser.nextText();</span><br><span class="line">                        channel.setTemp(temp);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"wind"</span>.equals(parser.getName()))&#123;</span><br><span class="line">                        String wind = parser.nextText();</span><br><span class="line">                        channel.setWind(wind);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"pm250"</span>.equals(parser.getName()))&#123;</span><br><span class="line">                        String pm250 = parser.nextText();</span><br><span class="line">                        channel.setPm250(pm250);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> XmlPullParser.END_TAG:     <span class="comment">//结束解析的标志</span></span><br><span class="line">                    <span class="keyword">if</span>(<span class="string">"channel"</span>.equals(parser.getName()))&#123;     <span class="comment">//判断解析结束的标签</span></span><br><span class="line">                        weatherLists.add(channel);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            type = parser.next();   <span class="comment">//指向下一行数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  weatherLists;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-主方法："><a href="#4-主方法：" class="headerlink" title="4.主方法："></a>4.主方法：</h3><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">               setContentView(R.layout.activity_main);</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   TextView textView = (TextView) findViewById(R.id.text); <span class="comment">//显示信息</span></span><br><span class="line">                   InputStream inputStream = getAssets().open(<span class="string">"weather.xml"</span>);  <span class="comment">//通过流的方式获取XML文件的内容</span></span><br><span class="line">                   List&lt;Channel&gt; list = WeatherParser.parserXml(inputStream);  <span class="comment">//调用XML解析的方法</span></span><br><span class="line">                   StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                   <span class="keyword">for</span> (Channel channel : list)&#123;</span><br><span class="line">                       stringBuffer.append(channel.toString());</span><br><span class="line">                   &#125;</span><br><span class="line">                   textView.setText(stringBuffer.toString());  <span class="comment">//输出XML文件的数据信息</span></span><br><span class="line">               &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;XML文件的数据来源于服务器，-服务器的开发人员通过服务器技术把数据封装在XML文件中，然后返回给客户端。对应的客户端开发人员需要对XML文件进行解析，把里面重要的数据取出来。另外，服务器是以流的形式把数据返回的。&quot;&gt;&lt;a href=&quot;#XML文件的数据来源于服务器，-服务器的开发人员通过服务器技术把数据封装在XML文件中，然后返回给客户端。对应的客户端开发人员需要对XML文件进行解析，把里面重要的数据取出来。另外，服务器是以流的形式把数据返回的。&quot; class=&quot;headerlink&quot; title=&quot;XML文件的数据来源于服务器， 服务器的开发人员通过服务器技术把数据封装在XML文件中，然后返回给客户端。对应的客户端开发人员需要对XML文件进行解析，把里面重要的数据取出来。另外，服务器是以流的形式把数据返回的。&quot;&gt;&lt;/a&gt;XML文件的数据来源于服务器， 服务器的开发人员通过服务器技术把数据封装在XML文件中，然后返回给客户端。对应的客户端开发人员需要对XML文件进行解析，把里面重要的数据取出来。另外，服务器是以流的形式把数据返回的。&lt;/h3&gt;&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
