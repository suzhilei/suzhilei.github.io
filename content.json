{"meta":{"title":"小胖子","subtitle":null,"description":"遵从内心","author":"小胖子","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2018-01-25T16:23:10.000Z","updated":"2018-01-25T16:26:06.346Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-01-25T16:25:45.000Z","updated":"2018-01-25T16:25:45.155Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"Collections-Framework","date":"2018-01-30T14:34:38.586Z","updated":"2018-01-30T17:21:02.733Z","comments":true,"path":"2018/01/30/Collections-Framework/","link":"","permalink":"http://yoursite.com/2018/01/30/Collections-Framework/","excerpt":"","text":"一、Java集合类简介：Java集合大致可以分为Set、List、Queue和Map四种体系。 其中Set代表无序、不可重复的集合；List代表有序、重复的集合；而Map则代表具有映射关系的集合。Java 5 又增加了Queue体系集合，代表一种队列集合实现。 Java集合就像一种容器，可以把多个对象（实际上是对象的引用，但习惯上都称对象）“丢进”该容器中。从Java 5 增加了泛型以后，Java集合可以记住容器中对象的数据类型，使得编码更加简洁、健壮。 1.Java集合和数组的区别：①.数组长度在初始化时指定，意味着只能保存定长的数据。而集合可以保存数量不确定的数据。同时可以保存具有映射关系的数据（即关联数组，键值对 key-value）。 ②.数组元素即可以是基本类型的值，也可以是对象。集合里只能保存对象（实际上只是保存对象的引用变量），基本数据类型的变量要转换成对应的包装类才能放入集合类中。 2.Java集合类之间的继承关系:Java的集合类主要由两个接口派生而出：Collection和Map,Collection和Map是Java集合框架的根接口。 图中，ArrayList,HashSet,LinkedList,TreeSet是我们经常会有用到的已实现的集合类。 Map实现类用于保存具有映射关系的数据。Map保存的每项数据都是key-value对，也就是由key和value两个值组成。Map里的key是不可重复的，key用户标识集合里的每项数据。 图中，HashMap，TreeMap是我们经常会用到的集合类。 二、Collection接口：1.简介Collection接口是Set,Queue,List的父接口。Collection接口中定义了多种方法可供其子类进行实现，以实现数据操作。由于方法比较多，就偷个懒，直接把JDK文档上的内容搬过来。 1.1.接口中定义的方法 可以看出Collection用法有：添加元素，删除元素，返回Collection集合的个数以及清空集合等。其中重点介绍iterator()方法，该方法的返回值是Iterator。 1.2.使用Iterator遍历集合元素Iterator接口经常被称作迭代器，它是Collection接口的父接口。但Iterator主要用于遍历集合中的元素。Iterator接口中主要定义了2个方法： 下面程序简单示范了通过Iterator对象逐个获取元素的逻辑。 12345678910111213141516171819public class IteratorExample &#123; public static void main(String[] args)&#123; //创建集合，添加元素 Collection&lt;Day&gt; days = new ArrayList&lt;Day&gt;(); for(int i =0;i&lt;10;i++)&#123; Day day = new Day(i,i*60,i*3600); days.add(day); &#125; //获取days集合的迭代器 Iterator&lt;Day&gt; iterator = days.iterator(); while(iterator.hasNext())&#123;//判断是否有下一个元素 Day next = iterator.next();//取出该元素 //逐个遍历，取得元素后进行后续操作 ..... &#125; &#125;&#125; 注意： 当使用Iterator对集合元素进行迭代时，把集合元素的值传给了迭代变量（就如同参数传递是值传递，基本数据类型传递的是值，引用类型传递的仅仅是对象的引用变量。 下面的程序演示了这一点：123456789101112131415161718192021222324252627282930public class IteratorExample &#123; public static void main(String[] args) &#123; List&lt;MyObject&gt; list = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; 10; i++) &#123; list.add(new MyObject(i)); &#125; System.out.println(list.toString()); Iterator&lt;MyObject&gt; iterator = list.iterator();//集合元素的值传给了迭代变量，仅仅传递了对象引用。保存的仅仅是指向对象内存空间的地址 while (iterator.hasNext()) &#123; MyObject next = iterator.next(); next.num = 99; &#125; System.out.println(list.toString()); &#125; static class MyObject &#123; int num; MyObject(int num) &#123; this.num = num; &#125; @Override public String toString() &#123; return String.valueOf(num); &#125; &#125;&#125; 输出结果如下： [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] [99, 99, 99, 99, 99, 99, 99, 99, 99, 99] 下面具体介绍Collection接口的三个子接口Set，List，Queue。 2.Set集合简介Set集合与Collection集合基本相同，没有提供任何额外的方法。实际上Set就是Collection，只是行为略有不同（Set不允许包含重复元素）。 Set集合不允许包含相同的元素，如果试图把两个相同的元素加入同一个Set集合中，则添加操作失败，add()方法返回false，且新元素不会被加入。 3.List集合3.1.简介List集合代表一个元素有序、可重复的集合，集合中每个元素都有其对应的顺序索引。List集合允许使用重复元素，可以通过索引来访问指定位置的集合元素 。List集合默认按元素的添加顺序设置元素的索引，例如第一个添加的元素索引为0，第二个添加的元素索引为1…… List作为Collection接口的子接口，可以使用Collection接口里的全部方法。而且由于List是有序集合，因此List集合里增加了一些根据索引来操作集合元素的方法。 3.2.接口中定义的方法 void add(int index, Object element): 在列表的指定位置插入指定元素（可选操作）。 boolean addAll(int index, Collection&lt;? extends E&gt; c) : 将集合c 中的所有元素都插入到列表中的指定位置index处。 Object get(index): 返回列表中指定位置的元素。 int indexOf(Object o): 返回此列表中第一次出现的指定元素的索引；如果此列表不包含该元素，则返回 -1。 int lastIndexOf(Object o): 返回此列表中最后出现的指定元素的索引；如果列表不包含此元素，则返回 -1。 Object remove(int index): 移除列表中指定位置的元素。 Object set(int index, Object element): 用指定元素替换列表中指定位置的元素。 List subList(int fromIndex, int toIndex): 返回列表中指定的 fromIndex（包括 ）和 toIndex（不包括）之间的所有集合元素组成的子集。 Object[] toArray(): 返回按适当顺序包含列表中的所有元素的数组（从第一个元素到最后一个元素）。 除此之外，Java 8还为List接口添加了如下两个默认方法。 void replaceAll(UnaryOperator operator): 根据operator指定的计算规则重新设置List集合的所有元素。 void sort(Comparator c): 根据Comparator参数对List集合的元素排序。 4.Queue集合4.1.简介Queue用户模拟队列这种数据结构，队列通常是指“先进先出”(FIFO，first-in-first-out)的容器。队列的头部是在队列中存放时间最长的元素，队列的尾部是保存在队列中存放时间最短的元素。新元素插入（offer）到队列的尾部，访问元素（poll）操作会返回队列头部的元素。通常，队列不允许随机访问队列中的元素。 4.2.接口中定义的方法 三、Map集合1.简介Map用户保存具有映射关系的数据，因此Map集合里保存着两组数，一组值用户保存Map里的key,另一组值用户保存Map里的value，key和value都可以是任何引用类型的数据。Map的key不允许重复，即同一个Map对象的任何两个key通过equals方法比较总是返回false。 如下图所描述，key和value之间存在单向一对一关系，即通过指定的key,总能找到唯一的、确定的value。从Map中取出数据时，只要给出指定的key，就可以取出对应的value。 2.Map集合与Set集合、List集合的关系①.与Set集合的关系 如果 把Map里的所有key放在一起看，它们就组成了一个Set集合（所有的key没有顺序，key与key之间不能重复），实际上Map确实包含了一个keySet()方法，用户返回Map里所有key组成的Set集合。 ②.与List集合的关系 如果把Map里的所有value放在一起来看，它们又非常类似于一个List：元素与元素之间可以重复，每个元素可以根据索引来查找，只是Map中索引不再使用整数值，而是以另外一个对象作为索引。 3.接口中定义的方法 Map中还包括一个内部类Entry，该类封装了一个key-value对。Entry包含如下三个方法： Map集合最典型的用法就是成对地添加、删除key-value对，然后就是判断该Map中是否包含指定key，是否包含指定value，也可以通过Map提供的keySet()方法获取所有key组成的集合，然后使用foreach循环来遍历Map的所有key，根据key即可遍历所有的value。下面程序代码示范Map的一些基本功能： 1234567891011121314151617181920212223242526public class MapTest &#123; public static void main(String[] args)&#123; Day day1 = new Day(1, 2, 3); Day day2 = new Day(2, 3, 4); Map&lt;String,Day&gt; map = new HashMap&lt;String,Day&gt;(); //成对放入key-value对 map.put(\"第一个\", day1); map.put(\"第二个\", day2); //判断是否包含指定的key System.out.println(map.containsKey(\"第一个\")); //判断是否包含指定的value System.out.println(map.containsValue(day1)); //循环遍历 //1.获得Map中所有key组成的set集合 Set&lt;String&gt; keySet = map.keySet(); //2.使用foreach进行遍历 for (String key : keySet) &#123; //根据key获得指定的value System.out.println(map.get(key)); &#125; //根据key来移除key-value对 map.remove(\"第一个\"); System.out.println(map); &#125;&#125; 输出结果： true true Day [hour=2, minute=3, second=4] Day [hour=1, minute=2, second=3] {第二个=Day [hour=2, minute=3, second=4]}","categories":[],"tags":[]},{"title":"使用序列化器生成XML文件","slug":"我的第一篇文章","date":"2018-01-27T13:54:47.000Z","updated":"2018-01-30T18:40:43.619Z","comments":true,"path":"2018/01/27/我的第一篇文章/","link":"","permalink":"http://yoursite.com/2018/01/27/我的第一篇文章/","excerpt":"","text":"生成xml的步骤:1.获取XmlSerializer实例：XmlSerializer serializer = Xml.newSerializer(); 2.设置XmlSerializer序列化参数File file = new File(Environment.getExternalStorageDirectory(), &quot;index.txt&quot;); FileOutputStream fos = new FileOutputStream(file); 3.写xml文档的开头serializer.startDocument(&quot;utf-8&quot;, true); 4.写xml的节点serializer.startTag(null, &quot;smss&quot;); //节点的开始 serializer.text(&quot;这里写内容&quot;); //节点的内容 serializer.endTag(null, &quot;smss&quot;); //节点的结束 .......可以写很多个节点 5.写xml文档的结束serializer.endDocument()","categories":[],"tags":[]},{"title":"使用XmlPullParser解析Xml文件","slug":"XML文件的解析","date":"2018-01-27T13:54:47.000Z","updated":"2018-02-02T10:25:43.558Z","comments":true,"path":"2018/01/27/XML文件的解析/","link":"","permalink":"http://yoursite.com/2018/01/27/XML文件的解析/","excerpt":"XML文件的数据来源于服务器， 服务器的开发人员通过服务器技术把数据封装在XML文件中，然后返回给客户端。对应的客户端开发人员需要对XML文件进行解析，把里面重要的数据取出来。另外，服务器是以流的形式把数据返回的。","text":"XML文件的数据来源于服务器， 服务器的开发人员通过服务器技术把数据封装在XML文件中，然后返回给客户端。对应的客户端开发人员需要对XML文件进行解析，把里面重要的数据取出来。另外，服务器是以流的形式把数据返回的。一、解析xml的步骤:1.获取XmlPullParser实例：XmlPullParser Parser = Xml.XmlPullParser(); 2.设置XmlPullParser的参数parser.setInput(In,&quot;utf-8&quot;); //设置输入流，其编码方式 3.获取解析文档的事件类型int type = parser.getEventType(); //相当于一个指针，一行行地遍历 4.判断解析的是哪个标签while(type != XmlPullParser.END_DOCUMENT){ switch (type){ case XmlPullParser.START_TAG: //开始解析的标志 if(....){ .... }else if(....){ .... } .... break; case XmlPullParser.END_TAG: //结束解析的标志 if(....){ .... } break; } type = parser.next(); //指向下一行 } 二、具体案例:1.要解析的XML文件：weather.xml: 12345678910111213141516171819202122232425262728&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;weather&gt; &lt;channel id = &quot;1&quot;&gt; &lt;city&gt;北京&lt;/city&gt; &lt;temp&gt;25&lt;/temp&gt; &lt;wind&gt;3&lt;/wind&gt; &lt;pm250&gt;300&lt;/pm250&gt; &lt;/channel&gt; &lt;channel id = &quot;2&quot;&gt; &lt;city&gt;郑州&lt;/city&gt; &lt;temp&gt;20&lt;/temp&gt; &lt;wind&gt;4&lt;/wind&gt; &lt;pm250&gt;300&lt;/pm250&gt; &lt;/channel&gt; &lt;channel id = &quot;3&quot;&gt; &lt;city&gt;长春&lt;/city&gt; &lt;temp&gt;10&lt;/temp&gt; &lt;wind&gt;4&lt;/wind&gt; &lt;pm250&gt;100&lt;/pm250&gt; &lt;/channel&gt; &lt;channel id = &quot;4&quot;&gt; &lt;city&gt;沈阳&lt;/city&gt; &lt;temp&gt;20&lt;/temp&gt; &lt;wind&gt;1&lt;/wind&gt; &lt;pm250&gt;50&lt;/pm250&gt; &lt;/channel&gt;&lt;/weather&gt; 2.javabean类：Channel.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859public class Channel &#123; public String id; public String city; public String temp; public String wind; public String pm250; public String getCity() &#123; return city; &#125; public void setCity(String city) &#123; this.city = city; &#125; public String getId() &#123; return id; &#125; public void setId(String id) &#123; this.id = id; &#125; public String getPm250() &#123; return pm250; &#125; public void setPm250(String pm250) &#123; this.pm250 = pm250; &#125; public String getTemp() &#123; return temp; &#125; public void setTemp(String temp) &#123; this.temp = temp; &#125; public String getWind() &#123; return wind; &#125; public void setWind(String wind) &#123; this.wind = wind; &#125; @Override public String toString() &#123; return \"Channel&#123;\" + \"city='\" + city + '\\'' + \", id='\" + id + '\\'' + \", temp='\" + temp + '\\'' + \", wind='\" + wind + '\\'' + \", pm250='\" + pm250 + '\\'' + '&#125;'; &#125;&#125; 3.解析XML文件的类：WeatherParser.java 12345678910111213141516171819202122232425262728293031323334353637383940414243public class WeatherParser &#123; public static List&lt;Channel&gt; parserXml(InputStream in) throws Exception&#123; List&lt;Channel&gt; weatherLists = null; //声明集合对象 Channel channel = null; //声明Channel对象 XmlPullParser parser = Xml.newPullParser(); //获取XmlPullParser实例 parser.setInput(in, \"utf-8\"); //设置XmlPullParser参数 int type = parser.getEventType(); //获取事件类型 while(type != XmlPullParser.END_DOCUMENT)&#123; switch (type)&#123; case XmlPullParser.START_TAG: //开始解析的标志 if(\"weather\".equals(parser.getName()))&#123; weatherLists = new ArrayList&lt;Channel&gt;(); //创建集合的对象 &#125;else if(\"channel\".equals(parser.getName()))&#123; channel = new Channel(); //创建Channel的对象 String id = parser.getAttributeValue(0); //获取id的值 channel.setId(id); &#125;else if(\"city\".equals(parser.getName()))&#123; String city = parser.nextText(); //获取标签中的数据，往下的几行代码都是的一样的 channel.setCity(city); &#125;else if(\"temp\".equals(parser.getName()))&#123; String temp = parser.nextText(); channel.setTemp(temp); &#125;else if(\"wind\".equals(parser.getName()))&#123; String wind = parser.nextText(); channel.setWind(wind); &#125;else if(\"pm250\".equals(parser.getName()))&#123; String pm250 = parser.nextText(); channel.setPm250(pm250); &#125; break; case XmlPullParser.END_TAG: //结束解析的标志 if(\"channel\".equals(parser.getName()))&#123; //判断解析结束的标签 weatherLists.add(channel); &#125; break; &#125; type = parser.next(); //指向下一行数据 &#125; return weatherLists; &#125;&#125; 4.主方法：MainActivity.java 123456789101112131415161718192021public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); try &#123; TextView textView = (TextView) findViewById(R.id.text); //显示信息 InputStream inputStream = getAssets().open(\"weather.xml\"); //通过流的方式获取XML文件的内容 List&lt;Channel&gt; list = WeatherParser.parserXml(inputStream); //调用XML解析的方法 StringBuffer stringBuffer = new StringBuffer(); for (Channel channel : list)&#123; stringBuffer.append(channel.toString()); &#125; textView.setText(stringBuffer.toString()); //输出XML文件的数据信息 &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;","categories":[],"tags":[]}]}